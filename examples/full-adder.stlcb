let and = \x. \y. if x then y else false in
let not = \x. if x then false else true in
let or  = \x. \y. if x then true else y in
let xor = \x. \y. if x then not y else y in
-- We write the full-adder in CPS style, since we cannot return products.
-- The function k gets carry and the sum as inputs.
\x. \y. \c. \k.
  let xy = xor x y in
  let s  = xor xy c in
  let c' = or (and x y) (and xy c) in
  k c' s
